{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "serviceName": {
            "type": "string",
            "minLength": 3,
            "maxLength": 24,
            "metadata": {
                "description": "Name of the FHIR service Web App."
            }
        },
        "appServicePlanResourceGroup": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Resource group containing App Service Plan. If empty, deployment resource group is used."
            }
        },
        "appServicePlanName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Name of App Service Plan (existing or new). If empty, a name will be generated."
            }
        },
        "appServicePlanSku": {
            "type": "string",
            "allowedValues": [
                "F1",
                "D1",
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1",
                "P2",
                "P3",
                "P4"
            ],
            "defaultValue": "S1"
        },
        "numberOfInstances": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "Sets the number of instances to deploy for the app service."
            }
        },
        "securityAuthenticationAuthority": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "OAuth Authority"
            }
        },
        "securityAuthenticationAudience": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Audience (aud) to validate in JWT"
            }
        },
        "enableAadSmartOnFhirProxy": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Enable Azure AAD SMART on FHIR Proxy"
            }
        },
        "deployApplicationInsights": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Deploy Application Insights for the FHIR server."
            }
        },
        "applicationInsightsLocation": {
            "type": "string",
            "defaultValue": "eastus",
            "allowedValues": [
                "southeastasia",
                "northeurope",
                "westeurope",
                "eastus",
                "southcentralus",
                "westus2",
                "usgovvirginia",
                "usgovarizona"
            ]
        },
        "additionalFhirServerConfigProperties": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Additional configuration properties for the FHIR server. In the form {\"path1\":\"value1\",\"path2\":\"value2\"}"
            }
        },
        "solutionType": {
            "type": "string",
            "defaultValue": "FhirServerCosmosDB",
            "allowedValues": [
                "FhirServerCosmosDB",
                "FhirServerSqlServer"
            ],
            "metadata": {
                "description": "The type of the solution"
            }
        },
        "cosmosDbAccountConsistencyPolicy": {
            "type": "object",
            "defaultValue": {
                "defaultConsistencyLevel": "Strong"
            },
            "metadata": {
                "description": "An object representing the default consistency policy for the Cosmos DB account. See https://docs.microsoft.com/en-us/azure/templates/microsoft.documentdb/databaseaccounts#ConsistencyPolicy"
            }
        },
        "cosmosDbFreeTier": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "Use Cosmos DB free tier."
            }
        },
        "cosmosDbCmkUrl": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Key url for the Cosmos DB customer managed key. If not provided a system managed key will be used. If an invalid value is provided the service will not start."
            }
        },
        "sqlServerName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Name of Sql Server (existing or new). If empty, a name will be generated."
            }
        },
        "sqlServerNewOrExisting": {
            "type": "string",
            "defaultValue": "new",
            "metadata": {
                "description": "Determines whether or not a new SqlServer should be provisioned."
            }
        },
        "sqlAdminPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The password for the sql admin user if using SQL server."
            }
        },
        "sqlLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "An override location for the sql server database."
            }
        },
        "sqlSchemaAutomaticUpdatesEnabled": {
            "type": "string",
            "allowedValues": [ "auto", "tool" ],
            "defaultValue": "[if(equals(parameters('solutionType'),'FhirServerCosmosDB'), 'tool', '')]",
            "metadata": {
                "description": "Determine whether the sql schema should be automatically upgraded on server startup. If set to 'tool', sql schema will not be initialized or upgraded on the server startup. The schema migration tool will be required to perform initialize or upgrade. If set to 'auto', sql schema will be upgraded to the maximum supported version."
            }
        },
        "fhirVersion": {
            "type": "string",
            "defaultValue": "R4",
            "allowedValues": [
                "Stu3",
                "R4",
                "R4B",
                "R5"
            ],
            "metadata": {
                "description": "Version of the FHIR specification to deploy."
            }
        },
        "imageTag": {
            "type": "string",
            "defaultValue": "release",
            "metadata": {
                "description": "Tag of the docker image to deploy."
            }
        },
        "enableExport": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Determines whether export will be enabled for this fhir instance. If true, a storage account will be created as part of the deployment. You will need owner or user-administrator permissions for this."
            }
        },
        "enableConvertData": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Determines whether the $convert-data operation will be enabled for this fhir instance. If true, an Azure container registry will be created as part of the deployment. You will need owner or user-administrator permissions for this."
            }
        },
        "enableReindex": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Determines whether the $reindex operation will be enabled for this fhir instance."
            }
        },
        "enableImport": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Determines whether the $import operation will be enabled for this fhir instance."
            }
        },
        "backgroundTaskCount": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "Supports parallel background task running"
            }
        }
    },
    "variables": {
        "isMAG": "[or(contains(resourceGroup().location,'usgov'),contains(resourceGroup().location,'usdod'))]",
        "isCosmosDbFreeTier": "[equals(parameters('cosmosDbFreeTier'),'Yes')]",
        "serviceName": "[toLower(parameters('serviceName'))]",
        "keyvaultEndpoint": "[if(variables('isMAG'), concat('https://', variables('serviceName'), '.vault.usgovcloudapi.net/'), concat('https://', variables('serviceName'), '.vault.azure.net/'))]",
        "appServicePlanResourceGroup": "[if(empty(parameters('appServicePlanResourceGroup')), resourceGroup().name, parameters('appServicePlanResourceGroup'))]",
        "appServicePlanName": "[if(empty(parameters('appServicePlanName')),concat(variables('serviceName'),'-asp'),parameters('appServicePlanName'))]",
        "appServiceResourceId": "[resourceId('Microsoft.Web/sites', variables('serviceName'))]",
        "securityAuthenticationEnabled": "[and(not(empty(parameters('securityAuthenticationAuthority'))),not(empty(parameters('securityAuthenticationAudience'))))]",
        "deployAppInsights": "[parameters('deployApplicationInsights')]",
        "appInsightsName": "[concat('AppInsights-', variables('serviceName'))]",
        "storageBlobDataContributerRoleId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "acrPullRoleId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
        "cosmosDbDataContributerRoleId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', variables('serviceName'), '00000000-0000-0000-0000-000000000002')]",
        "blobStorageUri": "[if(variables('isMAG'), '.blob.core.usgovcloudapi.net', '.blob.core.windows.net')]",
        "enableIntegrationStore": "[or(parameters('enableExport'), parameters('enableImport'))]",
        "staticFhirServerConfigProperties": {
            "APPINSIGHTS_PORTALINFO": "ASP.NETCORE",
            "APPINSIGHTS_PROFILERFEATURE_VERSION": "1.0.0",
            "APPINSIGHTS_SNAPSHOTFEATURE_VERSION": "1.0.0",
            "WEBSITE_NODE_DEFAULT_VERSION": "6.9.4",
            "KeyVault__Endpoint": "[variables('keyvaultEndpoint')]",
            "FhirServer__Security__Enabled": "[variables('securityAuthenticationEnabled')]",
            "FhirServer__Security__EnableAadSmartOnFhirProxy": "[parameters('enableAadSmartOnFhirProxy')]",
            "FhirServer__Security__Authentication__Authority": "[parameters('securityAuthenticationAuthority')]",
            "FhirServer__Security__Authentication__Audience": "[parameters('securityAuthenticationAudience')]",
            "CosmosDb__UseManagedIdentity": "true",
            "CosmosDb__ContinuationTokenSizeLimitInKb": "1",
            "SqlServer__Initialize": "[equals(parameters('solutionType'),'FhirServerSqlServer')]",
            "SqlServer__SchemaOptions__AutomaticUpdatesEnabled": "[if(equals(parameters('sqlSchemaAutomaticUpdatesEnabled'),'auto'), true(), false())]",
            "DataStore": "[if(equals(parameters('solutionType'),'FhirServerCosmosDB'), 'CosmosDb', 'SqlServer')]",
            "TaskHosting__Enabled": "[if(equals(parameters('solutionType'),'FhirServerCosmosDB'), false(), parameters('enableImport'))]",
            "TaskHosting__MaxRunningTaskCount": "[parameters('backgroundTaskCount')]",
            "FhirServer__Operations__IntegrationDataStore__StorageAccountUri": "[if(parameters('enableImport'), concat('https://', variables('storageAccountName'), variables('blobStorageUri')), 'null')]",
            "FhirServer__Operations__Export__Enabled": "[parameters('enableExport')]",
            "FhirServer__Operations__Export__StorageAccountUri": "[if(parameters('enableExport'), concat('https://', variables('storageAccountName'), variables('blobStorageUri')), 'null')]",
            "FhirServer__Operations__ConvertData__Enabled": "[parameters('enableConvertData')]",
            "FhirServer__Operations__ConvertData__ContainerRegistryServers__0": "[if(parameters('enableConvertData'), concat(variables('azureContainerRegistryName'), variables('azureContainerRegistryUri')), 'null')]",
            "FhirServer__Operations__Reindex__Enabled": "[parameters('enableReindex')]",
            "FhirServer__Operations__Import__Enabled": "[parameters('enableImport')]"
        },
        "combinedFhirServerConfigProperties": "[union(variables('staticFhirServerConfigProperties'), parameters('additionalFhirServerConfigProperties'))]",
        "sqlServerDerivedName": "[if(empty(parameters('sqlServerName')),variables('serviceName'),parameters('sqlServerName'))]",
        "sqlDatabaseName": "[concat('FHIR', parameters('fhirVersion'))]",
        "cosmosCollectionName": "[if(equals(parameters('fhirVersion'),'Stu3'), 'fhir', concat('fhir', parameters('fhirVersion')))]",
        "computedSqlServerReference": "[concat('Microsoft.Sql/servers/', variables('sqlServerDerivedName'))]",
        "storageAccountName": "[concat(substring(replace(variables('serviceName'), '-', ''), 0, min(11, length(replace(variables('serviceName'), '-', '')))), uniquestring(resourceGroup().id, variables('serviceName')))]",
        "registryName": "healthplatformregistry.azurecr.io",
        "azureContainerRegistryUri": "[if(variables('isMAG'), '.azurecr.us', '.azurecr.io')]",
        "azureContainerRegistryName": "[concat(substring(replace(variables('serviceName'), '-', ''), 0, min(11, length(replace(variables('serviceName'), '-', '')))), uniquestring(resourceGroup().id, variables('serviceName')))]"
    },
    "resources": [
        {
            "condition": "[empty(parameters('appServicePlanResourceGroup'))]",
            "apiVersion": "2018-02-01",
            "name": "[variables('appServicePlanName')]",
            "type": "Microsoft.Web/serverfarms",
            "kind": "linux",
            "tags": {
                "FhirServerSolution": "[parameters('solutionType')]"
            },
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "[parameters('appServicePlanSku')]"
            },
            "properties": {
                "name": "[variables('appServicePlanName')]",
                "numberOfWorkers": "[parameters('numberOfInstances')]",
                "reserved": true
            }
        },
        {
            "apiVersion": "2018-11-01",
            "type": "Microsoft.Web/sites",
            "name": "[variables('serviceName')]",
            "tags": {
                "FhirServerSolution": "[parameters('solutionType')]"
            },
            "location": "[resourceGroup().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "name": "[parameters('serviceName')]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "DOCKER_REGISTRY_SERVER_URL",
                            "value": "[concat('https://', variables('registryName'))]"
                        },
                        {
                            "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                            "value": ""
                        },
                        {
                            "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
                            "value": ""
                        },
                        {
                            "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
                            "value": "true"
                        }
                    ]
                },
                "serverFarmId": "[resourceId(variables('appServicePlanResourceGroup'), 'Microsoft.Web/serverfarms/', variables('appServicePlanName'))]",
                "clientAffinityEnabled": false
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]"
            ],
            "resources": [
                {
                    "apiVersion": "2018-11-01",
                    "name": "appsettings",
                    "type": "config",
                    "dependsOn": [
                        "[variables('appServiceResourceId')]",
                        "[if(variables('deployAppInsights'),concat('Microsoft.Insights/components/', variables('appInsightsName')),resourceId('Microsoft.KeyVault/vaults', variables('serviceName')))]",
                        "[if(equals(parameters('solutionType'),'FhirServerCosmosDB'), resourceId('Microsoft.KeyVault/vaults/secrets', variables('serviceName'), 'CosmosDb--Host'), resourceId('Microsoft.KeyVault/vaults/secrets', variables('serviceName'), 'SqlServer--ConnectionString'))]"
                    ],
                    "properties": "[if(variables('deployAppInsights'), union(variables('combinedFhirServerConfigProperties'), json(concat('{\"ApplicationInsights__InstrumentationKey\": \"', reference(concat('Microsoft.Insights/components/', variables('appInsightsName'))).InstrumentationKey, '\"}'))), variables('combinedFhirServerConfigProperties'))]"
                },
                {
                    "apiVersion": "2018-11-01",
                    "name": "web",
                    "type": "config",
                    "dependsOn": [
                        "appsettings",
                        "[variables('appServiceResourceId')]",
                        "[if(variables('deployAppInsights'),concat('Microsoft.Insights/components/', variables('appInsightsName')),resourceId('Microsoft.KeyVault/vaults', variables('serviceName')))]"
                    ],
                    "properties": {
                        "linuxFxVersion": "[concat('DOCKER|', variables('registryName'), '/', toLower(parameters('fhirVersion')), '_fhir-server',':', parameters('imageTag'))]",
                        "appCommandLine": "azure-fhir-api",
                        "alwaysOn": true,
                        "healthCheckPath": "/health/check"
                    }
                }
            ]
        },
        {
            "apiVersion": "2015-05-01",
            "name": "[variables('appInsightsName')]",
            "type": "Microsoft.Insights/components",
            "location": "[parameters('applicationInsightsLocation')]",
            "condition": "[variables('deployAppInsights')]",
            "kind": "web",
            "tags": {
                "[concat('hidden-link:', variables('appServiceResourceId'))]": "Resource",
                "displayName": "AppInsightsComponent",
                "FhirServerSolution": "[parameters('solutionType')]"
            },
            "properties": {
                "Application_Type": "web",
                "ApplicationId": "[variables('serviceName')]"
            }
        },
        {
            "condition": "[equals(parameters('solutionType'),'FhirServerCosmosDB')]",
            "apiVersion": "2019-12-12",
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "tags": {
                "FhirServerSolution": "[parameters('solutionType')]"
            },
            "name": "[variables('serviceName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "name": "[variables('serviceName')]",
                "databaseAccountOfferType": "Standard",
                "consistencyPolicy": "[parameters('cosmosDbAccountConsistencyPolicy')]",
                "keyVaultKeyUri": "[parameters('cosmosDbCmkUrl')]",
                "locations": [
                    {
                        "locationName": "[resourceGroup().location]",
                        "failoverPriority": 0
                    }
                ]
            }
        },
        {
            "condition": "[equals(parameters('solutionType'),'FhirServerCosmosDB')]",
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
            "apiVersion": "2022-11-15",
            "name": "[concat(variables('serviceName'), '/health')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('serviceName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "health"
                }
            }
        },
        {
            "condition": "[equals(parameters('solutionType'),'FhirServerCosmosDB')]",
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
            "apiVersion": "2022-11-15",
            "name": "[concat(variables('serviceName'), '/health/', variables('cosmosCollectionName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('serviceName'), 'health')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('serviceName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "[variables('cosmosCollectionName')]",
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "automatic": true,
                        "includedPaths": [
                            {
                                "path": "/*"
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/rawResource/*"
                            },
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    },
                    "partitionKey": {
                        "paths": [
                            "/partitionKey"
                        ],
                        "kind": "Hash"
                    },
                    "defaultTtl": -1,
                    "conflictResolutionPolicy": {
                        "mode": "LastWriterWins",
                        "conflictResolutionPath": "/_ts"
                    }
                }
            }
        },
        {
            "condition": "[equals(parameters('solutionType'),'FhirServerCosmosDB')]",
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/storedProcedures",
            "apiVersion": "2022-11-15",
            "name": "[concat(variables('serviceName'), '/health/', variables('cosmosCollectionName'), '/acquireExportJobs_50FDEB206CB28339F5F5330D96076FF0DDFCE6B48AEFD066B518BFC2448662C4')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', variables('serviceName'), 'health', variables('cosmosCollectionName'))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('serviceName'), 'health')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('serviceName'))]"
            ],
            "properties": {
                "resource": {
                    "body": "/**\n* This stored procedure acquires list of available export jobs.\n*\n* @constructor\n* @param {string} numberOfJobs - The number of jobs to fetch in string.\n* @param {string} jobHeartbeatTimeoutThresholdInSecondsInString - The number of seconds allowed before the job is considered to be stale in string.\n*/\n\nfunction acquireExportJobs(numberOfJobs, jobHeartbeatTimeoutThresholdInSecondsInString) {\n    const collection = getContext().getCollection();\n    const collectionLink = collection.getSelfLink();\n    const response = getContext().getResponse();\n\n    // Validate input\n    if (!numberOfJobs) {\n        throwArgumentValidationError(`The required parameter 'numberOfJobs' is not specified.`);\n    }\n\n    let numberOfJobsToAcquire = parseInt(numberOfJobs);\n\n    if (numberOfJobsToAcquire <= 0) {\n        throwArgumentValidationError(`The specified numberOfJobs with value '${numberOfJobs}' is invalid.`);\n    }\n\n    if (!jobHeartbeatTimeoutThresholdInSecondsInString) {\n        throwArgumentValidationError(`The required parameter 'jobHeartbeatTimeoutThresholdInSecondsInString' is not specified.`);\n    }\n\n    let jobHeartbeatTimeoutThresholdInSeconds = parseInt(jobHeartbeatTimeoutThresholdInSecondsInString);\n\n    if (jobHeartbeatTimeoutThresholdInSeconds <= 0) {\n        throwArgumentValidationError(`The specified jobHeartbeatTimeoutThresholdInSecondsInString with value '${jobHeartbeatTimeoutThresholdInSecondsInString}' is invalid.`);\n    }\n\n    // Calculate the expiration time in seconds where the job is considered to be stale.\n    let expirationTime = new Date().setMilliseconds(0) / 1000 - jobHeartbeatTimeoutThresholdInSeconds;\n\n    tryQueryAvailableJobs(numberOfJobsToAcquire);\n\n    function tryQueryAvailableJobs(limit, continuation) {\n        if (limit < 0) {\n            limit = 0;\n        }\n\n        let query = {\n            query: `SELECT TOP ${limit} * FROM ROOT r WHERE (r.jobRecord.status = 'Queued' OR (r.jobRecord.status = 'Running' AND r._ts <= ${expirationTime})) ORDER BY r._ts ASC`\n        };\n\n        let requestOptions = {\n            continuation: continuation\n        };\n\n        let isQueryAccepted = collection.queryDocuments(\n            collectionLink,\n            query,\n            requestOptions,\n            function (err, documents, responseOptions) {\n                if (err) {\n                    throw err;\n                }\n\n                if (documents.length > 0) {\n                    // Update each documents.\n                    tryAcquire(documents, 0);\n                } else if (responseOptions.continuation) {\n                    // The query came back with empty result but has continuation token, follow the token.\n                    tryQueryAvailableJobs(limit, responseOptions.continuation);\n                } else {\n                    // We don't have any documents so we are done.\n                    response.setBody([]);\n                }\n            });\n\n        if (!isQueryAccepted) {\n            // We ran out of time.\n            throwTooManyRequestsError();\n        }\n    }\n\n    function tryAcquire(documents, index) {\n        if (documents.length === index) {\n            // Finished acquiring all jobs.\n            response.setBody(documents);\n        } else {\n            let document = documents[index];\n\n            let requestOptions = {\n                etag: document._etag\n            };\n\n            // Update the state.\n            document.jobRecord.status = 'Running';\n\n            let isQueryAccepted = collection.replaceDocument(\n                document._self,\n                document,\n                requestOptions,\n                function (err, updatedDocument) {\n                    if (err) {\n                        throw err;\n                    }\n\n                    documents[index] = updatedDocument;\n                    tryAcquire(documents, index + 1);\n                });\n\n            if (!isQueryAccepted) {\n                // We ran out of time.\n                throwTooManyRequestsError();\n            }\n       }\n    }\n\n    function throwArgumentValidationError(message) {\n        throw new Error(ErrorCodes.BadRequest, message);\n    }\n\n    function throwTooManyRequestsError() {\n        throw new Error(429, `The request could not be completed.`);\n    }\n}\n",
                    "id": "acquireExportJobs_50FDEB206CB28339F5F5330D96076FF0DDFCE6B48AEFD066B518BFC2448662C4"
                }
            }
        },
        {
            "condition": "[equals(parameters('solutionType'),'FhirServerCosmosDB')]",
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/storedProcedures",
            "apiVersion": "2022-11-15",
            "name": "[concat(variables('serviceName'), '/health/', variables('cosmosCollectionName'), '/acquireReindexJobs_594B7E5081646BBFE998B7DBFDB14C766DAF76B7C55839B0F49E64E60C0CE6E6')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', variables('serviceName'), 'health', variables('cosmosCollectionName'))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('serviceName'), 'health')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('serviceName'))]"
            ],
            "properties": {
                "resource": {
                    "body": "/**\n* This stored procedure acquires list of available reindex jobs.\n*\n* @constructor\n* @param {string} maximumNumberOfConcurrentJobsAllowedInString - The maximum number of concurrent jobs allowed in string.\n* @param {string} jobHeartbeatTimeoutThresholdInSecondsInString - The number of seconds allowed before the job is considered to be stale in string.\n*/\n\nfunction acquireReindexJobs(maximumNumberOfConcurrentJobsAllowedInString, jobHeartbeatTimeoutThresholdInSecondsInString) {\n    const collection = getContext().getCollection();\n    const collectionLink = collection.getSelfLink();\n    const response = getContext().getResponse();\n\n    // Validate input\n    if (!maximumNumberOfConcurrentJobsAllowedInString) {\n        throwArgumentValidationError(`The required parameter 'maximumNumberOfConcurrentJobsAllowedInString' is not specified.`);\n    }\n\n    let maximumNumberOfConcurrentJobsAllowed = parseInt(maximumNumberOfConcurrentJobsAllowedInString);\n\n    if (maximumNumberOfConcurrentJobsAllowed <= 0) {\n        throwArgumentValidationError(`The specified maximumNumberOfConcurrentJobsAllowedInString with value '${maximumNumberOfConcurrentJobsAllowedInString}' is invalid.`);\n    }\n\n    if (!jobHeartbeatTimeoutThresholdInSecondsInString) {\n        throwArgumentValidationError(`The required parameter 'jobHeartbeatTimeoutThresholdInSecondsInString' is not specified.`);\n    }\n\n    let jobHeartbeatTimeoutThresholdInSeconds = parseInt(jobHeartbeatTimeoutThresholdInSecondsInString);\n\n    if (jobHeartbeatTimeoutThresholdInSeconds <= 0) {\n        throwArgumentValidationError(`The specified jobHeartbeatTimeoutThresholdInSecondsInString with value '${jobHeartbeatTimeoutThresholdInSecondsInString}' is invalid.`);\n    }\n\n    // Calculate the expiration time in seconds where the job is considered to be stale.\n    let expirationTime = new Date().setMilliseconds(0) / 1000 - jobHeartbeatTimeoutThresholdInSeconds;\n\n    tryQueryRunningJobs();\n\n    function tryQueryRunningJobs() {\n        // Find list of active running jobs.\n        let query = {\n            query: `SELECT VALUE COUNT(1) FROM ROOT r WHERE r.jobRecord.status = 'Running' AND r._ts > ${expirationTime}`\n        };\n\n        let isQueryAccepted = collection.queryDocuments(\n            collectionLink,\n            query,\n            {},\n            function (err, resources) {\n                if (err) {\n                    throw err;\n                }\n\n                let numberOfRunningJobs = resources[0];\n\n                // Based on list of running jobs, query for list of available jobs.\n                tryQueryAvailableJobs(numberOfRunningJobs);\n            });\n\n        if (!isQueryAccepted) {\n            // We ran out of time.\n            throwTooManyRequestsError();\n        }\n    }\n\n    function tryQueryAvailableJobs(numberOfRunningJobs, continuation) {\n        let limit = maximumNumberOfConcurrentJobsAllowed - numberOfRunningJobs;\n\n        if (limit < 0) {\n            limit = 0;\n        }\n\n        let query = {\n            query: `SELECT TOP ${limit} * FROM ROOT r WHERE (r.jobRecord.status = 'Queued' OR (r.jobRecord.status = 'Running' AND r._ts <= ${expirationTime})) ORDER BY r._ts ASC`\n        };\n\n        let requestOptions = {\n            continuation: continuation\n        };\n\n        let isQueryAccepted = collection.queryDocuments(\n            collectionLink,\n            query,\n            requestOptions,\n            function (err, documents, responseOptions) {\n                if (err) {\n                    throw err;\n                }\n\n                if (documents.length > 0) {\n                    // Update each documents.\n                    tryAcquire(documents, 0);\n                } else if (responseOptions.continuation) {\n                    // The query came back with empty result but has continuation token, follow the token.\n                    tryQueryAvailableJobs(numberOfRunningJobs, responseOptions.continuation);\n                } else {\n                    // We don't have any documents so we are done.\n                    response.setBody([]);\n                }\n            });\n\n        if (!isQueryAccepted) {\n            // We ran out of time.\n            throwTooManyRequestsError();\n        }\n    }\n\n    function tryAcquire(documents, index) {\n        if (documents.length === index) {\n            // Finished acquiring all jobs.\n            response.setBody(documents);\n        } else {\n            let document = documents[index];\n\n            let requestOptions = {\n                etag: document._etag\n            };\n\n            // Update the state.\n            document.jobRecord.status = 'Running';\n\n            let isQueryAccepted = collection.replaceDocument(\n                document._self,\n                document,\n                requestOptions,\n                function (err, updatedDocument) {\n                    if (err) {\n                        throw err;\n                    }\n\n                    documents[index] = updatedDocument;\n                    tryAcquire(documents, index + 1);\n                });\n\n            if (!isQueryAccepted) {\n                // We ran out of time.\n                throwTooManyRequestsError();\n            }\n        }\n    }\n\n    function throwArgumentValidationError(message) {\n        throw new Error(ErrorCodes.BadRequest, message);\n    }\n\n    function throwTooManyRequestsError() {\n        throw new Error(429, `The request could not be completed.`);\n    }\n}\n",
                    "id": "acquireReindexJobs_594B7E5081646BBFE998B7DBFDB14C766DAF76B7C55839B0F49E64E60C0CE6E6"
                }
            }
        },
        {
            "condition": "[equals(parameters('solutionType'),'FhirServerCosmosDB')]",
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/storedProcedures",
            "apiVersion": "2022-11-15",
            "name": "[concat(variables('serviceName'), '/health/', variables('cosmosCollectionName'), '/hardDelete_E374DABF25D84F03ADEDA824FB3B62BA3442C7D2635C24A6B3C83F1AC137C8B5')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', variables('serviceName'), 'health', variables('cosmosCollectionName'))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('serviceName'), 'health')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('serviceName'))]"
            ],
            "properties": {
                "resource": {
                    "body": "/**\n* This stored procedure provides the following functionality:\n* - Completely delete the document and all of its histories.\n*\n* @constructor\n* @param {string} resourceTypeName - The resource type name.\n* @param {string} resourceId - The resource id.\n* @param {boolean} keepCurrentVersion - Specifies if the current version of the resource should be kept.\n*/\n\nfunction hardDelete(resourceTypeName, resourceId, keepCurrentVersion) {\n    const collection = getContext().getCollection();\n    const collectionLink = collection.getSelfLink();\n    const response = getContext().getResponse();\n\n    // Validate input\n    if (!resourceTypeName) {\n        throwArgumentValidationError(\"The resourceTypeName is undefined or null\");\n    }\n\n    if (!resourceId) {\n        throwArgumentValidationError(\"The resourceId is undefined or null\");\n    }\n\n    let deletedResourceIdList = new Array();\n\n    tryQueryAndHardDelete();\n\n    function tryQueryAndHardDelete() {\n        // Find the resource and all of its history.\n        let queryText = \"SELECT r._self, r.id FROM ROOT r WHERE r.resourceTypeName = @resourceTypeName AND r.resourceId = @resourceId\";\n\n        if(keepCurrentVersion === true){\n            queryText += \" AND r.isHistory = true\";\n        }\n\n        let query = {\n            query: queryText,\n            parameters: [{ name: \"@resourceTypeName\", value: resourceTypeName }, { name: \"@resourceId\", value: resourceId }]\n        };\n\n        let isQueryAccepted = collection.queryDocuments(\n            collectionLink,\n            query,\n            {},\n            function (err, documents, responseOptions) {\n                if (err) {\n                    throw err;\n                }\n\n                if (documents.length > 0) {\n                    // Delete the documents.\n                    tryHardDelete(documents);\n                } else {\n                    // There is no more documents so we are finished.\n                    response.setBody(deletedResourceIdList);\n                }\n            });\n\n        if (!isQueryAccepted) {\n            // We ran out of time.\n            throwTooManyRequestsError();\n        }\n    }\n\n    function tryHardDelete(documents) {\n        if (documents.length > 0) {\n            deletedResourceIdList.push(documents[0].id);\n\n            // Delete the first item.\n            var isAccepted = collection.deleteDocument(\n                documents[0]._self,\n                {},\n                function (err, responseOptions) {\n                    if (err) {\n                        throw err;\n                    }\n\n                    // Successfully deleted the item, continue deleting.\n                    documents.shift();\n                    tryHardDelete(documents);\n                });\n\n            if (!isAccepted) {\n                // We ran out of time.\n                throwTooManyRequestsError();\n            }\n        } else {\n            // If the documents are empty, query for more documents.\n            tryQueryAndHardDelete();\n        }\n    }\n\n    function throwArgumentValidationError(message) {\n        throw new Error(ErrorCodes.BadRequest, message);\n    }\n\n    function throwTooManyRequestsError() {\n        throw new Error(429, `The request could not be completed.`);\n    }\n}\n",
                    "id": "hardDelete_E374DABF25D84F03ADEDA824FB3B62BA3442C7D2635C24A6B3C83F1AC137C8B5"
                }
            }
        },
        {
            "condition": "[equals(parameters('solutionType'),'FhirServerCosmosDB')]",
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/storedProcedures",
            "apiVersion": "2022-11-15",
            "name": "[concat(variables('serviceName'), '/health/', variables('cosmosCollectionName'), '/replaceSingleResource_DCEE03CAF05E37A4A02D1F2D00B1A4BE0E157B3AA0FEF9558B25556BDA8786E2')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', variables('serviceName'), 'health', variables('cosmosCollectionName'))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('serviceName'), 'health')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('serviceName'))]"
            ],
            "properties": {
                "resource": {
                    "body": "/**\n* This stored procedure can be used to replace an existing document\n*\n* @constructor\n* @param {any} doc - The CosmosResourceWrapper to save\n* @param {string} matchVersionId - required etag to match against when replacing an existing document\n*/\nfunction replaceSingleResource(doc, matchVersionId) {\n    const collection = getContext().getCollection();\n    const collectionLink = collection.getSelfLink();\n    const response = getContext().getResponse();\n\n\n    // Validate input\n    if (!doc) {\n        throwArgumentValidationError(\"The document is undefined or null.\");\n    }\n\n    if (doc instanceof Array) {\n        throwArgumentValidationError(\"Input should not be an array.\");\n    }\n\n    if (stringIsNullOrEmpty(matchVersionId)) {\n        throwArgumentValidationError(\"Invalid VersionId provided.\");\n    }\n\n    let query = {\n        query: \"select * from root r where r.id = @id\",\n        parameters: [{ name: \"@id\", value: doc.id }]\n    };\n\n    let isQueryAccepted = collection.queryDocuments(\n        collection.getSelfLink(),\n        query,\n        function (err, documents) {\n            if (err) {\n                throw err;\n            }\n\n            let document = documents.length === 0 ? null : documents[0];\n\n            if (document === null ||\n                doc.isDeleted && document.isDeleted) { // don't create another version if already deleted\n                throw new Error(ErrorCodes.NotFound, \"Document not found.\");\n            }\n\n            // Check that the version passed in matches with current document version\n            if (document.version !== matchVersionId) {\n                throwPreconditionFailedError();\n            }\n\n            // Replace the primary record\n            doc.version = matchVersionId;\n            let selfLink = document._self;\n            let isAccepted = collection.replaceDocument(selfLink, doc, { disableAutomaticIdGeneration: true, etag: document._etag }, replacePrimaryCallback);\n\n            if (!isAccepted) {\n                throwRequestNotQueuedError();\n            }\n        });\n\n    if (!isQueryAccepted) {\n        throwRequestNotQueuedError();\n    }\n\n    function stringIsNullOrEmpty(str) {\n        return str === undefined || str === null || str === \"\";\n    }\n\n    function replacePrimaryCallback(err, createdDoc) {\n        if (err) {\n            if (err.number === ErrorCodes.Conflict ||\n                err.number === ErrorCodes.PreconditionFailed) {\n                throw createPreconditionFailedError();\n            } else {\n                throw err;\n            }\n        }\n\n        response.setBody(createdDoc);\n    }\n\n    function throwRequestNotQueuedError() {\n        throw new Error(429, \"Request could not be queued.\");\n    }\n\n    function throwPreconditionFailedError() {\n        throw new Error(ErrorCodes.PreconditionFailed, \"One of the specified pre-conditions is not met.\");\n    }\n\n    function throwArgumentValidationError(message) {\n        throw new Error(ErrorCodes.BadRequest, message);\n    }\n}\n",
                    "id": "replaceSingleResource_DCEE03CAF05E37A4A02D1F2D00B1A4BE0E157B3AA0FEF9558B25556BDA8786E2"
                }
            }
        },
        {
            "condition": "[equals(parameters('solutionType'),'FhirServerCosmosDB')]",
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/throughputSettings",
            "apiVersion": "2022-11-15",
            "name": "[concat(variables('serviceName'), '/health/', variables('cosmosCollectionName'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', variables('serviceName'), 'health', variables('cosmosCollectionName'))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('serviceName'), 'health')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('serviceName'))]"
            ],
            "properties": {
                "resource": {
                    "throughput": 1000
                }
            }
        },
        {
            "condition": "[equals(parameters('solutionType'),'FhirServerCosmosDB')]",
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('serviceName'), '/CosmosDb--Host')]",
            "apiVersion": "2015-06-01",
            "properties": {
                "contentType": "text/plain",
                "value": "[if(equals(parameters('solutionType'),'FhirServerCosmosDB'), reference(concat('Microsoft.DocumentDb/databaseAccounts/', variables('serviceName'))).documentEndpoint, '')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('serviceName'))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', variables('serviceName'), 'health', variables('cosmosCollectionName'))]"
            ]
        },
        {
            "condition": "[equals(parameters('solutionType'),'FhirServerCosmosDB')]",
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('serviceName'), '/CosmosDb--Key')]",
            "apiVersion": "2015-06-01",
            "properties": {
                "contentType": "text/plain",
                "value": "[if(equals(parameters('solutionType'),'FhirServerCosmosDB'), listKeys(resourceId('Microsoft.DocumentDb/databaseAccounts', variables('serviceName')), '2015-04-08').primaryMasterKey, '')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('serviceName'))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', variables('serviceName'), 'health', variables('cosmosCollectionName'))]"
            ]
        },
        {
            "condition": "[equals(parameters('solutionType'),'FhirServerCosmosDB')]",
            "apiVersion": "2022-11-15",
            "name": "[concat(variables('serviceName'), '/', guid(uniqueString('CosmosDB', parameters('fhirVersion'), variables('serviceName'))))]",
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('serviceName'))]",
                "[variables('appServiceResourceId')]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('cosmosDbDataContributerRoleId')]",
                "principalId": "[reference(concat('Microsoft.Web/sites/', variables('serviceName')), '2018-11-01', 'full').identity.principalId]",
                "scope": "[resourceId('Microsoft.DocumentDb/databaseAccounts', variables('serviceName'))]"
            }
        },
        {
            "condition": "[and(equals(parameters('solutionType'),'FhirServerSqlServer'),equals(parameters('sqlServerNewOrExisting'), 'new'))]",
            "name": "[variables('sqlServerDerivedName')]",
            "type": "Microsoft.Sql/servers",
            "apiVersion": "2015-05-01-preview",
            "location": "[parameters('sqlLocation')]",
            "tags": {
                "FhirServerSolution": "[parameters('solutionType')]"
            },
            "properties": {
                "administratorLogin": "fhirAdmin",
                "administratorLoginPassword": "[parameters('sqlAdminPassword')]",
                "version": "12.0"
            },
            "resources": [
                {
                    "condition": "[equals(parameters('solutionType'),'FhirServerSqlServer')]",
                    "apiVersion": "2017-10-01-preview",
                    "dependsOn": [
                        "[variables('sqlServerDerivedName')]"
                    ],
                    "location": "[parameters('sqlLocation')]",
                    "tags": {
                        "FhirServerSolution": "[parameters('solutionType')]"
                    },
                    "name": "[variables('sqlDatabaseName')]",
                    "properties": {
                        "collation": "SQL_Latin1_General_CP1_CI_AS"
                    },
                    "sku": {
                        "name": "Standard",
                        "tier": "Standard",
                        "capacity": 50
                    },
                    "type": "databases"
                },
                {
                    "condition": "[equals(parameters('solutionType'),'FhirServerSqlServer')]",
                    "apiVersion": "2014-04-01",
                    "dependsOn": [
                        "[variables('sqlServerDerivedName')]"
                    ],
                    "location": "[resourceGroup().location]",
                    "name": "AllowAllWindowsAzureIps",
                    "properties": {
                        "endIpAddress": "0.0.0.0",
                        "startIpAddress": "0.0.0.0"
                    },
                    "type": "firewallrules"
                }
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[variables('serviceName')]",
            "apiVersion": "2015-06-01",
            "location": "[resourceGroup().location]",
            "tags": {
                "FhirServerSolution": "[parameters('solutionType')]"
            },
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "Standard"
                },
                "tenantId": "[reference(variables('appServiceResourceId'), '2015-08-01', 'Full').Identity.tenantId]",
                "accessPolicies": [
                    {
                        "tenantId": "[reference(variables('appServiceResourceId'), '2015-08-01', 'Full').Identity.tenantId]",
                        "objectId": "[reference(variables('appServiceResourceId'), '2015-08-01', 'Full').Identity.principalId]",
                        "permissions": {
                            "secrets": [
                                "get",
                                "list",
                                "set"
                            ]
                        }
                    }
                ],
                "enabledForDeployment": false
            },
            "dependsOn": [
                "[variables('appServiceResourceId')]"
            ]
        },
        {
            "condition": "[equals(parameters('solutionType'),'FhirServerSqlServer')]",
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('serviceName'), '/SqlServer--ConnectionString')]",
            "apiVersion": "2015-06-01",
            "properties": {
                "contentType": "text/plain",
                "value": "[concat('Server=tcp:', if(equals(parameters('solutionType'),'FhirServerSqlServer'), reference(variables('computedSqlServerReference'), '2015-05-01-preview').fullyQualifiedDomainName, ''),',1433;Initial Catalog=',variables('sqlDatabaseName'),';Persist Security Info=False;User ID=', if(equals(parameters('solutionType'),'FhirServerSqlServer'), reference(variables('computedSqlServerReference'), '2015-05-01-preview').administratorLogin, ''),';Password=',parameters('sqlAdminPassword'),';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('serviceName'))]",
                "[resourceId('Microsoft.Sql/servers', variables('sqlServerDerivedName'))]"
            ]
        },
        {
            "name": "[variables('storageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "supportsHttpsTrafficOnly": true
            },
            "condition": "[variables('enableIntegrationStore')]",
            "dependsOn": [],
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "Storage",
            "tags": {}
        },
        {
            "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[concat(variables('storageAccountName'), '/Microsoft.Authorization/', guid(uniqueString(variables('storageAccountName'), parameters('fhirVersion'), variables('serviceName'))))]",
            "condition": "[variables('enableIntegrationStore')]",
            "dependsOn": [
                "[variables('storageAccountName')]",
                "[variables('serviceName')]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('storageBlobDataContributerRoleId')]",
                "principalId": "[reference(concat('Microsoft.Web/sites/', variables('serviceName')), '2018-11-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "name": "[variables('azureContainerRegistryName')]",
            "type": "Microsoft.ContainerRegistry/registries",
            "apiVersion": "2019-05-01",
            "location": "[resourceGroup().location]",
            "comments": "Container registry for storing templates images",
            "condition": "[parameters('enableConvertData')]",
            "tags": {
                "displayName": "Container Registry",
                "container.registry": "[variables('azureContainerRegistryName')]"
            },
            "sku": {
                "name": "Basic",
                "tier": "Basic"
            },
            "properties": {
                "adminUserEnabled": "true"
            }
        },
        {
            "type": "Microsoft.ContainerRegistry/registries/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[concat(variables('azureContainerRegistryName'), '/Microsoft.Authorization/', guid(uniqueString(variables('azureContainerRegistryName'), 'Acr', parameters('fhirVersion'), variables('serviceName'))))]",
            "condition": "[parameters('enableConvertData')]",
            "dependsOn": [
                "[variables('azureContainerRegistryName')]",
                "[variables('serviceName')]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('acrPullRoleId')]",
                "principalId": "[reference(concat('Microsoft.Web/sites/', variables('serviceName')), '2018-11-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        }
    ]
}
